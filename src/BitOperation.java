/**
 * @Author 王超
 * @Version V1.0.0
 * @Date 2021/10/18 12:03
 */
public class BitOperation {
    public static void main(String[] args) {
        BitOperation.convent(45489);
        System.out.println("");
        BitOperation.convent(45489<<32);
        System.out.println("");
        BitOperation.convent(45489<<31);
    }

    /**
     * 例如 : num = 1时
     * 第一次循环 : 00000000000000000000000000000001 和 1000000000000000000000000000000 做位运算 得到 0
     * 第二次循环 : 00000000000000000000000000000001 和 0100000000000000000000000000000 做位运算 得到 0
     * 第三次循环 : 00000000000000000000000000000001 和 0010000000000000000000000000000 做位运算 得到 0
     * ...
     * 最后一次循环 : 00000000000000000000000000000001 和 000000000000000000000000000001 做位运算
     * 得到 : 000000000000000000000000000001 也就是十进制的1
     * <br>
     * 数字1的二进制为 00000001, 左移多少位1就在什么位置上, 因为除了1之外全是0
     * 在和别的数字的二进制做位运算时只有1这个位上的比对结果才有意义,因为二进制1除了1都是0如果1对比结果也是0那最终结果就是0否则就是1
     * 一个数字左移一位等同于x2 0除外
     * @param num 数字
     */
    public static void convent(int num) {
        for (int i = 31; i >= 0; i--) {
            System.out.print((num & (1 << i)) == 0 ? "0" : "1");
        }
    }
}
